#!/usr/bin/env python
import shutil
import sys
import tempfile
from pycircuit.post.cds import CadenceSession, CadenceSessionTCP, netlist_cell

from optparse import OptionParser, BadOptionError, OptionValueError

version = '0.0'
    
usage = 'usage: %prog [options] library cell [view]'

parser = OptionParser(usage=usage,
                      version=version,
                      prog='cdsnetlist',
                      description='Cadence Virtuoso netlister')

parser.add_option('-l', '--list',
                  action='store_true', default=False,
                  help='List libraries, cells or views')

parser.add_option('-m', '--simulator',
                  default='spectre',
                  help='Simulator name, default: %default')

parser.add_option('-s', '--stopviews',
                  default='spectre',
                  help='Stop view list (comma separated), default: %default')

parser.add_option('-w', '--switchviews',
                  default='spectre,schematic,veriloga',
                  help='Switch view list (comma separated), default: %default')

parser.add_option('-c', '--subcircuit', action='store_true', default=False,
                  help='Netlist cell as a subcircuit')

parser.add_option('-d', '--debug', action='store_true', default=False,
                  help='Write interaction with Virtuoso to stderr')

parser.add_option('--host', default='localhost',
                  help='Host name of Skill command server when running in '
                  'server mode, default: %default')

parser.add_option('-p', '--projectdir',
                  help='Directory where Virtuoso will write the netlist')

(options, args) = parser.parse_args()

session = CadenceSession(verbose = options.debug, timeout=300)
#    session = CadenceSessionTCP(verbose = options.debug)


if options.list:
    if len(args) == 0:
        print session.evalexpr('%s~>name', session.ddGetLibList())
    elif len(args) == 1:
        print session.evalexpr('%s~>cells~>name', session.ddGetObj(*args))
    elif len(args) == 2:
        print session.evalexpr('%s~>views~>name', session.ddGetObj(*args))
else:
    if len(args) < 2:
        parser.error("incorrect number of arguments")

    lib, cell = args[:2]

    if len(args) > 2:
        view = args[2]
    else:
        view = 'schematic'

    targetdir = tempfile.mkdtemp()
    remove_targetdir_after = True

    try:
        result = netlist_cell(session, lib, cell, view,
                              simulator=options.simulator,
                              targetdir = targetdir,
                              stop_view_list=options.stopviews.split(','),
                              switch_view_list=options.switchviews.split(','),
                              subcircuit=options.subcircuit,
                              projectdir=options.projectdir)

        print open(result["netlist_filename"], "r").read()

    finally:
        if remove_targetdir_after:
            shutil.rmtree(targetdir)



    
